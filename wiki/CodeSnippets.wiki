#summary Various bits of code (pseudo or otherwise) that will help us along the way

=New Blob Code=
New Blob code is hopefully at FluidPseudocode

=Blob Pseudocode=

{{{
int numParticles = 128;
Particle[numParticles] particles;
bool[numParticles][numParticles] connected;   // 2d Array, is point x,y is connected?
int threshold = 4;

for (int i = 0; i < numParticles; ++i) {
	Particle thisParticle = particles[i];
	for (int j = i; j < numParticles; j++) {
		Particle thatParticle = particles[j];
		int distance = thisParticle.position = thatParticle.position;
		// Compare the distances between the two particles ?
		if (distance <= threshold && !connected[i][j]) {
			//close enough but not connected, so we'll connect it.
			if (thisParticle.neighbours.Count != 8 && thatParticle.neighbours.count != 8) {
				//both have room for another connection
				connected[i][j] = true;
				thisParticle.neighbours.add(thatParticle);
				thatParticle.neighbours.add(thisParticle);
				create spring between i and j;
			} else if (distance > 4 && connected[i][j]) {
				//connected, but too far away.
				get spring between i and j;
				delete spring.
			}
		}
	}
}
}}}

=Blob Code Revision=

{{{
int numParticles = 128;
Particle[numParticles] particles;
bool[numParticles][numParticles] connected;   // 2d Array, is point x,y is connected?
int threshold = 4;

for (int i = 0; i < numParticles; ++i) {
        Particle thisParticle = particles[i];
        for (int j = i; j < numParticles; j++) {
                Particle thatParticle = particles[j];
                int distance = thisParticle.position = thatParticle.position;
                // Compare the distances between the two particles ?
                if (distance <= threshold && !connected[i][j]) {
                    //close enough but not connected, so we'll connect it.
                    if (thisParticle.neighbours.Count != 8 && thatParticle.neighbours.count != 8) {
                            //both have room for another connection
                            connected[i][j] = true;
                            thisParticle.neighbours.add(thatParticle);
                            thatParticle.neighbours.add(thisParticle);
                            create spring between i and j;
                    }
		} else if (distance > 4 && connected[i][j]) {
                    //connected, but too far away.
                    get spring between i and j;
                    delete spring.
                }
         }
}
}}}